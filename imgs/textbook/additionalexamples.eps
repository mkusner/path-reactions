%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.5 (Build 16F73) Quartz PS Context)
%%Title: additionalexamples.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2018-05-22 15:44:05 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 423 279
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 423 279
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: QRKEMX+ArialMT
%!FontType1-1.0: QRKEMX+ArialMT 1.0000.5.0600
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /QRKEMX+ArialMT def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /O put
dup 34 /S put
dup 35 /H put
dup 36 /plus put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1361 1 index div -665 2 index div 4096 3 index div 2060 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/plus 1 def
/H 2 def
/O 3 def
/S 4 def
/uniA788 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1361 -665 4096 2060}def
/UniqueID 4173880 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C96AC05D8620AE2086072F250ADD3256490B02A185DDD3083C39A0A37A537BC048639785B6E6F90A8DE04DD6A0B7424D7C139EF296791E28BB8D00BB77A456A7067CF781B0648581FE0BD104A01E5385D59507A4C052E476B6C112680A3856A4B70867E23CEF2C11821985E4084E239F4F7B7E9950800DC45A4A4F2718244F6C6EC35C55B933B82226FA4F7A78DB3D95612C29EAE3C7738CEADFF916D436FDBD37B04FA13348016344A449BD03EE0050ED4C01BCAF267547D042BE0D3729D497E37D5CC450BFF50A891886C5B9C766DA9109CC3AB8BCDD701B70AAE45AD92A80DB1AF5FC0E82B27DE1E8CD779FE6C7882CE966F4A5339443F3C98C3E7718318D6310EAEE94373F55A5A55744E4C7ABA4F9346A18030D81382B182767DDAB4445AE15AEC6AAA2AC632AD6133384C6D59BFBDAF8EC21A13DD45ABD43C09D1D5377F30F26EA0E5C97DB32B17C7A0D24730C57CDA3EFD2A9634D9E7CB1702BCFA9B9B2BE7C72B595562C1261616DAEAD323C9B820097B3D08728BC36B101ADE76F6F57981177B0A8AF952204FA57083ACAEAD4C23314D8B36CB72FB1E85559ED887A9A4099BC20AC4A382F102AC352B199A2F77E36BFE2FA3D87585B937A741A9AF30FCAC64DEE0ED122AC115D879CFC68BAE47AF58ECD352748DFC55C87FCE1421CC4E57FA30069C72D29B7355007C7E14BADCE0D17E9AF43DA1A4DE37372C60AB38C863A3199F1EA8721B0B0AD63DC55C646AD0C315E7076343D91DBA25D7E41F6699
DF63DFD64ECCEAC54F5C284F835FF1B91777B7FE3F246290D59E647F3139EAE8B48174495A37979CD52536E0B7D23EF6574208BBF9AB976FCA8879BEDE2BBC99D42884D4AFA91B311BBF4D48F88DCB5A8B5C95C8790B612AD6BDD99591E5CD03E10F8ACF74256BC8B83CB0B29736925554B05A56702AB16758967433BF9F0983138A86EA3A03A5B0F36685BFC8BF1D294B95305515B0BB863BA633512F335FF348A1461EDF058AC268E4A1EA4CC8867894A918881FB6445B3A402979AE1BC1E1FF359B827019FBE7890325E5D9E504BAF242DEE755AEBB7F86F671767ABF02313A838029D0B844E829C9FA6869C53EBE4A7454A4492E891C01EBBF980CE2159C541712C05C15B13253C4976A054C968E3405709B9667639A7B6E5CE981DA23A180073EE6CED6AD3C885889E104809AFD4BB62547DAD7492F1C1BD06261F5F9F9A283FBD6915DE7B8B09120935CFE15D3C9E1C5FE2211
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/QRKEMX+ArialMT cguidfix
/F1.1/QRKEMX+ArialMT renmfont
%RBIBeginFontSubset: JKKFBQ+Helvetica
%!FontType1-1.0: JKKFBQ+Helvetica 1.0000.0.0000
14 dict begin/FontName /JKKFBQ+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /O put
dup 35 /two put
dup 36 /C put
dup 37 /l put
dup 38 /plus put
dup 39 /a put
dup 40 /parenright put
dup 41 /b put
dup 42 /c put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<




391239005D31304379401C04190C2511260B120E2800091407280119040D100A280108150A2801002B2B1010012B2B2B2B81005D36123F01363736353426232207060723363736213212151407060F01060706072115214A85C1C0813452967DB9472604B70342750128F6E37946B5896238641A030EFC29B90112706F4B35536B7D938C4B85BB76D0FEF6A3AC7A47654C3631576AAA00000002005AFFDA057105E5001D001E00B1403B1B0597019605031F011F0482018705891305530803861D111115063A1D030C3A15091E021E1E190331023B1031111A20093119191F20A1216A66182B2B4EF44DED4E10F64DEDF4ED12392F003F3FED3FED12392F10ED31304379403A001C172513260E251B260B160932000D1410320112110F10071C0932000500033201010204030A180C32000F120C3200081A06320104010632012B2B2B2B01103C103C2B2B103C103C2B2B2B2B2B2B815D015D080117232E0123220011101233323736373306070621202726111037362123041E013411C221C5B2D9FEF5F1EFDC733D1EC21A92AFFED7FF00AEE5ACBA01472805E5FEDABB8EA6FECFFEC5FEFEFEBFA95991E89DBD9BCD01AC0145D0E200000002009C0000052A05BD0009000A007640143701380602070117012701470158020507010202B8019B4017120606070207080301020806080A030A0A010608020302B8019BB505041A0C0708B8019B400A0900190B0CA0217670182B2B4EF43C4DFD3C4E10F63C4DFD3C11123939392F003F3F3C3F3C12393904872E2B877DC53130005D015D13330111331123011123019CEB02E6BDDFFD0FBE023A05BDFB5A04A6FA4304A5FB5B05BD000000030050FFD505E805E5000F001B001C008A402C8705C700C701C302C808C90A064308153A0F031B3A07091C021C1C0B1231031A1E18310B191D1ED8216A66182B2B4EF44DED4E10F64DED12392F003F3FED3FED313043794032001A0D26012509250526160E18320014001232011A081832001006123201170C1532011302153201190A1B320011041B32002B2B2B2B012B2B2B2B2B2B2B2B81005D0017161110070221202726111037122100123510002322001114122103049BBB92A7C4FE95FEADC2AD94BE0174011BEBFEF1EBE4FEE0F701150E05E5FAC3FED0FEB7DAFF00E0D8014A012AD40110FAA20179F50103013CFEC7FECFF4FEB1055E00030052FFDC04470449000F003B003C00DD40382A30010A100B1B0C1C2733481069096A10073908120C09031B320724091D100C1D3B2B022E293BB73B023B322A2512100705081C2722171CB8018A4023171D1F07271D2E0B021D350B3C073C3C1C1407292AA8241A3E1B291C4A0F2738193D3EBC0197002100B9019600182B2B4EF44DEDF4ED4E10F64DE4FDC412392F003F3FED3FED3FEDED123911121739


00>] def
/CharStrings 12 dict dup begin
/.notdef 0 def
/parenright 1 def
/plus 2 def
/two 3 def
/C 4 def
/N 5 def
/O 6 def
/a 7 def
/b 8 def
/c 9 def
/l 10 def
/u20B8 11 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B64DFC330C1264D9E86DB21FFDE360EA73793134E310C3576495659FA930C228F2795196FF3E6FF3F588F9E3B1B3849A2BC2982CBBE7E36632530D7D022F3B1D5F5BB72C556137326233141B7D42148ED23C383940CF5B95F9DB519DA5D024C7ADF6D00DCF7BFCAA7034DA378714523EE4CAB0715C9702928827C975F0A8E4080B7C89FD4A67FF6D23B5A21CB7E82D79701A99D55271784D282E34E1544823521C3EE051C5823FB83B0EE9B4934D7862382A96232C0FC93AD69712380E9E6769071D950F21B6B932644B6AE639E5DD67F93031446B765A85865E6C2F8C399110BF005A44FD7F6BCFF111C70AA76B28A2E6C04998DEA432D0EA621602C6A6701061BBFAD57BF6A8EC5B16A903A1A3E95647D1FC2A35469840CD296BC21E2962D05FFDF3BFC3DB0E3D3F7436CD62BBEE957B3846ABA5293F2BA2C0B77C0E1160CD7E75685BD092CAFA8262DE90396FFF9C7010B89BE34FF8853FE8F632A89360E8DB69025D962C41828BA6D9AB4B93E1F5BB75780C91E5F5806C586EB5C96A8FF43ACEDBB2E46B0CACCD84C157BE79FAA573C5CAB6CB4AD15579818ACD0C93855C6EF9284DAB88A610870A06FCE21B7F9BB39D2B2DE482AE8C7292745C341254E9C2319DD5DBA91167B0FA2E0BCC5205CCB972099913206DDBDEE9F83AFDE0C5B1363BA1D87918EE2D15A331DBE3B3B41AA86EC6AE4FECB80C96B248E8DD54468832B4B0E190249F53293450C56216814824EE37E455070562213B501BDDAAD0DB
920E9A44335BC82E09D801E9E0ABF3B003EB4E3AC8604BB1D815AF7889E29E8A16EAC4C259D405DB7653A327767A6EB6D322F98EB0632D0F9D12F45F8C5591352E3A19F3232A2024B531B88A733B554025361262233B4BF9CA57F03D5744A44881C63C52F8CB6348DDD4A2E9B34AEEF19AF3F78A80C6EAEBA943FAF85D5CF5A6B020B28422A380FB0DA2D559C32EE472B035520DD95ADA9DD45ABCC7500D8452807FBA2B638E5EBFDA91ADDAC55043ACFAE14437AB9B3DC9F7B7CDB3308372B150BAEA04811BAA93C42555162D52F0C7634E78596FD4D1FBE7AA22BB103DD6479B1DD3A24C906EFB36C139184137527323AF187F23C92B25947123739D23B214BD1705E2576CC1BBC499B87C4C89A391F8051D569521116861B49A817DAFA4712A7D759523514458C19A3A63D13C83A72358C00999C4CD78DC3A8610B892CE020668AC434D990BA3C06A4F2C986A88276916504B7CB09B9B48F100FC57BE180E38FCF61448F234B7A3BCBE0C952E75CF5299283F4F50E721EDD35BFD5C8F2F14016448CDE2FA1F708AD8B27B723F7A2CC8E613F5CAF37433419164B2F89688DB8250FE3A0DD7DDDF3B6972A516E804069D58ED8311BEA9B41C35B9C766C3A2FD6B61CAA57436AB15DB4131255C7DF91058F85E13D3EEF5A06EE023835C22E04E899C22E39EFBA75576B97D5CC646F81883F14A1F3A3A03C4EE6CE397A71D41B158A5DEA498F435E8EE6386731BE2B0FCA7BDA096EFDB5B32C9EA0B880B02658D7BE5C40F6E9CA5B4750978E27B7A86F94C91D241629E1377C97D748CB542970384EFC4428944110E9F7B5690287693C01DE479E62AA9644E5220E0D9584EE1A5550CE85716894C74FE8D1796AB4223F8EFDCFA96FA320E0F7C7D5B5351E2BB9D8300B63D9E74F2E86ADF29004D2A99568B173D43C5F6356C76AE94A42760B57796B74D23AB56FE6BE659FAADE61B89134796DCB1269D6733036F53B34EA463C74C7E12960A50A83E8A34E441C63158DA818E9464CE7255DA8FC4385BFEE60D237BA5B642859BD83A550671489B963FD851750481F4FCE1705BA23566D313A96EF13668DDD22ED928AA2F7F5ADFD008721A8FFFD1C45125D6D1F6ECF9CE9F45074427F5A77FA92FB7DE7EA65777A303E3AED965DF5FEBAFACAE13A9607C357AA2751F4CFA52407881FFE43CA33196AB8D60DCD759E0FB37F7B6413995FB20867C6A2C13A7BC28CEC7998B0C710AE29536A9296F1D841B1638DF79A157B8B6B3AAB09B8E3D946A7F80A6DA0C401A26CCFD6C94420AB245FD47EE611966DF42C1CA0D18ECC9F441AF9D4823C0F166B07D2E7F66096E69C03E28023333F96A5DAF6FFFF8E45EBF36F9D43AB6E8D4B40035B3D101FB70E122D1BECEC5ACDDCB8B25F7A86C6DD15626F7B6BEE54B28F963FBAC5275A2BC3766D66858AC7236C93EEBD0
2F02473ED6CB1C9260BD8A25833831E039A00DA276EE2194466DA918BE138329CB12D274804808A1103BDC3827CBABA9A2DD80E751C7804E812475E9064965651D7DAFFA321FE57C0C8D9E0FC0481324CEB8D3CA2DFC274D8779BEF6E3C1F21367234FD8744CD6995396476648712261912AC3185A5603685EC555370F8B4707E8C3BE03ACA85472D978C305687D423F0AA7EF431E1679B1A07FEDAA4686BCCE13272C244E75BC0299411C07E31373AD29F58F24362E5B73122F296A642483C70E5F465D994CF8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/JKKFBQ+Helvetica cguidfix
/F2.1/JKKFBQ+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 279 m
423 279 l
423 0 l
0 0 l
h
0 279 m
W
0 0 423 279 rc
-1 279 m
424 279 l
424 -1 l
-1 -1 l
h
f
0 0 0 sc
1 0 0 -1 144.47256 233.13643 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.2851562 m
(!)s
1 0 0 -1 132.00316 254.73409 cm
0 7.2851562 m
(!)s
20 w
1 J
0.050000001 0 0 -0.050000001 -35 508 cm
3916.6228 5436.1387 m
3748.113 5533.4277 l
S
3565.5227 5521.3999 m
3417.8462 5436.1387 l
S
3391.9292 5451.1021 m
3391.9292 5267.3496 l
S
3443.7634 5451.1021 m
3443.7634 5267.3496 l
S
3417.8462 5436.1387 m
3168.458 5580.123 l
S
3168.458 5580.123 m
2919.0696 5436.1387 l
S
3142.541 5625.0132 m
2919.0696 5495.9917 l
S
2919.0696 5436.1387 m
2669.6814 5580.123 l
S
2669.6814 5580.123 m
2669.6814 5868.0918 l
S
2617.8472 5610.0498 m
2617.8472 5838.165 l
S
2669.6814 5868.0918 m
2420.2932 6012.0762 l
S
2420.2932 6012.0762 m
2170.9053 5868.0918 l
S
2420.2932 5952.2231 m
2222.7395 5838.165 l
S
2170.9053 5868.0918 m
2170.9053 5580.123 l
S
2170.9053 5580.123 m
2420.2932 5436.1387 l
S
2222.7395 5610.0498 m
2420.2932 5495.9917 l
S
2669.6814 5580.123 m
2420.2932 5436.1387 l
S
1 0 0 -1 255.80246 246.41112 cm
0 7.2802734 m
(")s
1 0 0 -1 292.65649 224.8159 cm
0 7.2851562 m
(!)s
1 0 0 -1 280.1871 246.41356 cm
0 7.2851562 m
(!)s
0.050000001 0 0 -0.050000001 -35 508 cm
5633.3604 5170.5962 m
5383.9722 5314.5806 l
S
5633.3604 5170.5962 m
5780.1978 5255.373 l
S
6880.3013 5602.5493 m
6711.792 5699.8384 l
S
6529.2017 5687.8105 m
6381.5249 5602.5493 l
S
6355.6079 5617.5127 m
6355.6079 5433.7603 l
S
6407.4424 5617.5127 m
6407.4424 5433.7603 l
S
6381.5249 5602.5493 m
6132.1367 5746.5337 l
S
6132.1367 5746.5337 m
5882.7485 5602.5493 l
S
5882.7485 5602.5493 m
5633.3604 5746.5337 l
S
5633.3604 5746.5337 m
5633.3604 6034.5024 l
S
5581.5259 5776.4604 m
5581.5259 6004.5762 l
S
5633.3604 6034.5024 m
5383.9722 6178.4868 l
S
5383.9722 6178.4868 m
5134.584 6034.5024 l
S
5383.9722 6118.6338 m
5186.4185 6004.5762 l
S
5134.584 6034.5024 m
5134.584 5746.5337 l
S
5134.584 5746.5337 m
5383.9722 5602.5493 l
S
5186.4185 5776.4604 m
5383.9722 5662.4023 l
S
5633.3604 5746.5337 m
5383.9722 5602.5493 l
S
5882.7485 5413.8091 m
5882.7485 5602.5493 l
S
4701.5278 5542.6943 m
4230.8638 5542.6943 l
S
CM
205.34006 230.86528 m
205.34006 230.86528 199.32443 229.35887 199.32443 229.35887 c
199.32443 229.35887 200.07639 230.36971 200.07639 230.86528 c
200.07639 231.68983 199.32443 233.37167 199.32443 233.37167 c
199.32443 233.37167 205.34006 230.86528 205.34006 230.86528 c
205.34006 230.86528 205.34006 230.86528 205.34006 230.86528 c
h
f
1 0 0 -1 22.532209 243.88698 cm
0 7.2802734 m
("#)[ 6.669922 0.000000 ] xS
0.050000001 0 0 -0.050000001 -35 508 cm
1217.3434 5653.0322 m
967.9552 5797.0166 l
S
1217.3434 5653.0322 m
1217.3434 5484.292 l
S
1 0 0 -1 52.893822 237.63234 cm
/F1.1[ 10.163603 0 0 -10.163603 0 0]sf
0 9.20084 m
($)s
0.050000001 0 0 -0.050000001 -35 508 cm
3892.2458 7705.8452 m
3892.2458 7992.8452 l
S
3840.5857 7735.6709 m
3840.5857 7963.019 l
S
3892.2458 7992.8452 m
3643.6965 8136.3452 l
S
3643.6965 8136.3452 m
3395.1472 7992.8452 l
S
3643.6965 8076.6934 m
3446.8071 7963.019 l
S
3395.1472 7992.8452 m
3395.1472 7705.8452 l
S
3395.1472 7705.8452 m
3643.6965 7562.3452 l
S
3446.8071 7735.6709 m
3643.6965 7621.9971 l
S
3892.2458 7705.8452 m
3643.6965 7562.3452 l
S
1 0 0 -1 275.29919 157.3894 cm
/F2.1[ 10 0 0 -10 0 0]sf
0 7.3681641 m
(!")[ 7.221680 0.000000 ] xS
/F2.1[ 7.5 0 0 -7.5 0 0]sf
15 9.6679688 m
(#)s
0.050000001 0 0 -0.050000001 -35 508 cm
6278.2007 7174.2432 m
6278.2007 7382.8936 l
S
6278.2007 7382.8936 m
6526.75 7526.3936 l
S
6278.2007 7442.5454 m
6475.0898 7556.2192 l
S
6526.75 7526.3936 m
6526.75 7813.3936 l
S
6526.75 7813.3936 m
6278.2007 7956.8936 l
S
6475.0898 7783.5674 m
6278.2007 7897.2417 l
S
6278.2007 7956.8936 m
6029.6514 7813.3936 l
S
6029.6514 7813.3936 m
6029.6514 7526.3936 l
S
6081.311 7783.5674 m
6081.311 7556.2192 l
S
6278.2007 7382.8936 m
6029.6514 7526.3936 l
S
1860 7597.9014 m
2109.3882 7453.917 l
S
2109.3882 7453.917 m
2358.7766 7597.9014 l
S
1860 7597.9014 m
1610.6117 7453.917 l
S
1 0 0 -1 91.797401 139.48824 cm
/F2.1[ 10 0 0 -10 0 0]sf
0 7.3681641 m
($%)[ 7.221680 0.000000 ] xS
0.050000001 0 0 -0.050000001 -35 508 cm
2358.7766 7597.9014 m
2521.458 7503.9771 l
S
1 0 0 -1 79.049667 117.89059 cm
0 7.3681641 m
(")s
0.050000001 0 0 -0.050000001 -35 508 cm
2384.6936 7582.938 m
2384.6936 7780.1572 l
S
2332.8594 7582.938 m
2332.8594 7780.1572 l
S
5284.0034 7956.8936 m
5532.5527 7813.3936 l
S
5532.5527 7813.3936 m
5781.1021 7956.8936 l
S
5284.0034 7956.8936 m
5035.4541 7813.3936 l
S
1 0 0 -1 250.16594 99.989418 cm
0 7.3681641 m
(")s
0.050000001 0 0 -0.050000001 -35 508 cm
5806.9321 7941.9805 m
5806.9321 8138.1807 l
S
5755.272 7941.9805 m
5755.272 8138.1807 l
S
6029.6514 7813.3936 m
5781.1021 7956.8936 l
S
1 0 0 -1 143.57399 148.46527 cm
0 7.3681641 m
(!")[ 7.221680 0.000000 ] xS
/F2.1[ 7.5 0 0 -7.5 0 0]sf
15 9.6679688 m
(#)s
0.050000001 0 0 -0.050000001 -35 508 cm
3643.6965 7562.3452 m
3643.6965 7352.7261 l
S
4701.5278 7671.9932 m
4230.8638 7671.9932 l
S
CM
205.34006 124.40035 m
205.34006 124.40035 199.32443 122.89394 199.32443 122.89394 c
199.32443 122.89394 200.07639 123.90477 200.07639 124.40035 c
200.07639 125.22491 199.32443 126.90675 199.32443 126.90675 c
199.32443 126.90675 205.34006 124.40035 205.34006 124.40035 c
205.34006 124.40035 205.34006 124.40035 205.34006 124.40035 c
h
f
1 0 0 -1 114.51615 130.04927 cm
/F2.1[ 10 0 0 -10 0 0]sf
0 7.7001953 m
(&)s
0.050000001 0 0 -0.050000001 -35 508 cm
3872.2456 9425.8447 m
3872.2456 9712.8447 l
S
3820.5854 9455.6709 m
3820.5854 9683.0186 l
S
3872.2456 9712.8447 m
3623.6963 9856.3447 l
S
3623.6963 9856.3447 m
3375.147 9712.8447 l
S
3623.6963 9796.6934 m
3426.8071 9683.0186 l
S
3375.147 9712.8447 m
3375.147 9425.8447 l
S
3375.147 9425.8447 m
3623.6963 9282.3447 l
S
3426.8071 9455.6709 m
3623.6963 9341.9971 l
S
3872.2456 9425.8447 m
3623.6963 9282.3447 l
S
6258.2002 9102.8936 m
6506.75 9246.3936 l
S
6258.2002 9162.5449 m
6455.0898 9276.2197 l
S
6506.75 9246.3936 m
6506.75 9533.3936 l
S
6506.75 9533.3936 m
6258.2002 9676.8936 l
S
6455.0898 9503.5674 m
6258.2002 9617.2412 l
S
6258.2002 9676.8936 m
6009.6514 9533.3936 l
S
6009.6514 9533.3936 m
6009.6514 9246.3936 l
S
6061.311 9503.5674 m
6061.311 9276.2188 l
S
6258.2002 9102.8936 m
6009.6514 9246.3936 l
S
1840 9317.9014 m
2089.3882 9173.917 l
S
2089.3882 9173.917 m
2338.7764 9317.9014 l
S
1840 9317.9014 m
1590.6116 9173.917 l
S
1 0 0 -1 90.797394 53.488251 cm
0 7.3681641 m
($%)[ 7.221680 0.000000 ] xS
0.050000001 0 0 -0.050000001 -35 508 cm
2338.7764 9317.9014 m
2501.4578 9223.9766 l
S
1 0 0 -1 78.049652 31.890594 cm
0 7.3681641 m
(")s
0.050000001 0 0 -0.050000001 -35 508 cm
2364.6934 9302.9375 m
2364.6934 9500.1572 l
S
2312.8591 9302.9375 m
2312.8591 9500.1572 l
S
5264.0034 9676.8936 m
5512.5522 9533.3936 l
S
5512.5522 9533.3936 m
5761.1016 9676.8936 l
S
5264.0034 9676.8936 m
5015.4536 9533.3936 l
S
1 0 0 -1 249.16592 13.989426 cm
0 7.3681641 m
(")s
0.050000001 0 0 -0.050000001 -35 508 cm
5786.9316 9661.9805 m
5786.9316 9858.1807 l
S
5735.2715 9661.9805 m
5735.2715 9858.1807 l
S
6009.6514 9533.3936 m
5761.1016 9676.8936 l
S
4701.5278 9391.9932 m
4230.8638 9391.9932 l
S
CM
205.34006 38.40036 m
205.34006 38.40036 199.32443 36.893955 199.32443 36.893955 c
199.32443 36.893955 200.07639 37.904785 200.07639 38.40036 c
200.07639 39.224915 199.32443 40.906765 199.32443 40.906765 c
199.32443 40.906765 205.34006 38.40036 205.34006 38.40036 c
205.34006 38.40036 205.34006 38.40036 205.34006 38.40036 c
h
f
1 0 0 -1 113.51614 44.049286 cm
0 7.7001953 m
(&)s
1 0 0 -1 142.29565 62.465271 cm
0 7.3681641 m
(")s
0.050000001 0 0 -0.050000001 -35 508 cm
3623.6963 9282.3447 m
3623.6963 9112.7256 l
S
3520.2336 8934.6416 m
3374.3081 8850.3916 l
S
1 0 0 -1 249.12399 57.063648 cm
0 7.3681641 m
(")s
0.050000001 0 0 -0.050000001 -35 508 cm
6009.6514 9246.3936 m
5854.2417 9156.667 l
S
5760.2632 8996.6953 m
5760.2632 8814.4395 l
S
0 J
1 0 0 sc
1285.083 5209.5288 m
1512.4438 5051.3647 1542.0996 5812.5293 1838.6572 6099.2017 c
2135.2148 6385.874 2640 6320 2940 6260 c
3240 6200 3440 6040 3440 5700 c
S
CM
140.5 221.75 m
137 223 l
134.5 221.75 l
137 229.75 l
h
f
0 0 1 sc
0.050000001 0 0 -0.050000001 -35 508 cm
1196.1157 5169.9878 m
1255.4272 4972.2827 1245.542 4814.1187 1749.6899 4814.1187 c
2253.8379 4814.1187 2807.4121 5100.791 2876.6089 5308.3813 c
S
CM
106.06345 242.97621 m
108.83044 242.58093 l
110.80687 244.55736 l
110.96498 236.17732 l
h
f
0.050000001 0 0 -0.050000001 -35 508 cm
2985.6001 5608.7998 m
2985.6001 5737.3081 3202.8223 5911.3818 3183.0518 5703.7915 c
S
CM
126.75983 221.80309 m
124.15259 222.81042 l
121.78236 221.32903 l
123.51263 229.53001 l
h
f
0 0 0 sc
1 0 0 -1 1.7285767 276.96405 cm
0 7.7001953 m
('\()[ 5.561523 0.000000 ] xS
1 0 0 -1 1.5527954 158.48712 cm
0 7.7001953 m
(\)\()[ 5.561523 0.000000 ] xS
1 0 0 -1 1.8408813 74.109619 cm
0 7.7001953 m
(*\()[ 5.000000 0.000000 ] xS
1 0 0 sc
0.050000001 0 0 -0.050000001 -35 508 cm
3327.5635 7700.9326 m
2792.7764 8021.8047 2688.7781 7779.5259 2522.3999 7648.7998 c
S
CM
93.647453 126.75352 m
91.120003 125.56 l
90.558342 122.82193 l
85.812347 129.7303 l
h
f
0 0 0 sc
0.050000001 0 0 -0.050000001 -35 508 cm
2412.4834 7451.3652 m
2412.4834 7237.4507 2448.136 6940.3467 2543.2092 7225.5664 c
S
CM
89.393471 147.11696 m
92.160461 146.72168 l
94.136887 148.6981 l
94.294998 140.31807 l
h
f
0 0 1 sc
0.050000001 0 0 -0.050000001 -35 508 cm
3351.3318 8009.9209 m
2816.5449 8330.793 2640 7884 2508 7742.3999 c
S
CM
93.081017 121.67036 m
90.400002 120.88 l
89.423676 118.26097 l
85.797333 125.81741 l
h
f
1 0 0 sc
0.050000001 0 0 -0.050000001 -35 508 cm
3612 8198.4004 m
3077.2131 8519.2725 2576.6733 8080.8833 2481.6001 7843.2002 c
S
CM
91.865433 115.60788 m
89.080002 115.84 l
87.223045 113.75093 l
86.573112 122.10722 l
h
f
0 0 1 sc
0.050000001 0 0 -0.050000001 -35 508 cm
3327.5635 9425.0176 m
2792.7764 9745.8896 2688.7781 9503.6104 2522.3999 9372.8848 c
S
CM
93.647446 40.549305 m
91.119995 39.355785 l
90.558342 36.61771 l
85.812347 43.526081 l
h
f
1 0 0 sc
0.050000001 0 0 -0.050000001 -35 508 cm
3351.3318 9734.0049 m
2816.5449 10054.877 2640 9608.085 2508 9466.4844 c
S
CM
93.081009 35.466133 m
90.399994 34.675777 l
89.423676 32.056751 l
85.797325 39.613178 l
h
f
0 0 1 sc
0.050000001 0 0 -0.050000001 -35 508 cm
3611.9998 9922.4844 m
3077.2129 10243.356 2576.6729 9804.9678 2481.5996 9567.2842 c
S
CM
91.865417 29.403664 m
89.079987 29.635782 l
87.22303 27.546711 l
86.573097 35.903 l
h
f
0 0 0 sc
0.050000001 0 0 -0.050000001 -35 508 cm
2422.2795 9204.8379 m
2422.2795 8990.9229 2457.9319 8693.8193 2553.0051 8979.0391 c
S
CM
89.883263 59.443344 m
92.650261 59.048061 l
94.626678 61.024483 l
94.784798 52.644447 l
h
f
1 J
0.050000001 0 0 -0.050000001 -35 508 cm
8612.749 9610.6436 m
8364.2002 9754.1445 l
S
8561.0889 9580.8184 m
8364.2002 9694.4922 l
S
8364.2002 9754.1445 m
8115.6509 9610.6445 l
S
8115.6509 9610.6445 m
8115.6509 9323.6445 l
S
8167.3105 9580.8184 m
8167.3105 9353.4697 l
S
8115.6509 9323.6445 m
8364.2002 9180.1445 l
S
8364.2002 9180.1445 m
8612.749 9323.6445 l
S
8364.2002 9239.7959 m
8561.0889 9353.4707 l
S
8612.749 9610.6436 m
8612.749 9323.6445 l
S
7370.0029 9754.1445 m
7618.5522 9610.6445 l
S
7618.5522 9610.6445 m
7867.1016 9754.1445 l
S
7370.0029 9754.1445 m
7121.4536 9610.6445 l
S
1 0 0 -1 354.46591 10.126866 cm
0 7.3681641 m
(")s
0.050000001 0 0 -0.050000001 -35 508 cm
7892.9316 9739.2314 m
7892.9316 9935.4316 l
S
7841.2715 9739.2314 m
7841.2715 9935.4316 l
S
1 0 0 -1 404.17575 53.176865 cm
0 7.3681641 m
(")s
0.050000001 0 0 -0.050000001 -35 508 cm
8612.749 9323.6445 m
8761.0244 9238.0381 l
S
8955.2773 9234.4033 m
9109.8477 9323.6445 l
S
1 0 0 -1 300.84131 39.138157 cm
0 7.7001953 m
(&)s
0.050000001 0 0 -0.050000001 -35 508 cm
8115.6509 9610.6445 m
7867.1016 9754.1445 l
S
ep
end
%%Trailer
%%EOF
